!function(e){var t={};function n(i){if(t[i])return t[i].exports;var a=t[i]={i:i,l:!1,exports:{}};return e[i].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(i,a,function(t){return e[t]}.bind(null,a));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=804)}({1:function(e,t,n){"use strict";function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.d(t,"a",(function(){return s}));var s=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;i(this,e),t||(t={ajax:{beforeSend:function(){frameMgr.showProcessingMessage(MESSAGE_BUNDLE.getKey("core.please.wait"))},complete:function(){frameMgr.removeProcessingMessage()}}}),this.settings={ajax:$.extend({method:"post",headers:{"Content-Type":"application/json"}},t.ajax)}}var t,n,s;return t=e,(n=[{key:"post",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return $.ajax($.extend({},this.settings.ajax,{url:e,data:JSON.stringify(t)},n))}},{key:"put",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return $.ajax($.extend({},this.settings.ajax,{url:e,method:"PUT",data:JSON.stringify(t)},n))}},{key:"postPreparedData",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return $.ajax($.extend({},this.settings.ajax,{url:e,data:t},n))}},{key:"get",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return $.ajax($.extend({},this.settings.ajax,{url:e,method:"get"},t))}},{key:"delete",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return $.ajax($.extend({},this.settings.ajax,{url:e,method:"delete"},t))}},{key:"postMultiPartForm",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return $.ajax($.extend({},this.settings.ajax,{url:e,data:t,processData:!1,contentType:!1,method:"POST"},n))}}])&&a(t.prototype,n),s&&a(t,s),Object.defineProperty(t,"prototype",{writable:!1}),e}()},19:function(e,t,n){n(5)(n(20))},2:function(e,t,n){"use strict";function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}n.d(t,"a",(function(){return a}));var a=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.init()}var t,n,a;return t=e,(n=[{key:"init",value:function(){}},{key:"showError",value:function(e){this.showMessage(e,!1)}},{key:"showDefaultErrorMessage",value:function(){return this.showMessage(MESSAGE_BUNDLE.getKey("core.default.error.message"),!1),!1}},{key:"showModalError",value:function(e){$(".modal-message").html(MESSAGE_BUNDLE.getKey(e)).removeClass("hidden")}},{key:"hideModalError",value:function(){$(".modal-message").html("").addClass("hidden")}},{key:"showSuccess",value:function(e){this.showMessage(e,!0)}},{key:"showDefaultSuccessMessage",value:function(){return this.showMessage(MESSAGE_BUNDLE.getKey("core.default.success.message"),!0),!0}},{key:"showMessage",value:function(e,t){frameMgr.showMessage(MESSAGE_BUNDLE.getKey(e),t)}},{key:"getField",value:function(e,t){return e&&e.toString().trim()?e:t&&""!==t.trim()?t:MESSAGE_BUNDLE.getKey("core.na")}},{key:"getDateField",value:function(e,t){try{return e&&e.toString().trim()?moment(e).format("MMMM Do YYYY, h:mm:ss a"):this.getField(t)}catch(e){}return t}},{key:"confirm",value:function(e){function t(t){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}((function(e){return confirm(MESSAGE_BUNDLE.getKey(e))}))},{key:"loadTemplate",value:function(e,t){var n=$.Deferred();return $.ajax({url:"/remita/res/app-resources/".concat(e),method:"get",success:function(e){return n.resolve(Handlebars.compile(e)(t))},error:function(e){return n.reject(e)}}),n.promise()}},{key:"hideDefaultSuccessMessage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:5e3;setTimeout((function(){$("#sys-message-holder.alert-success").slideUp("fast",(function(){$(this).removeClass("alert-success").slideDown().addClass("hidden")}))}),e)}},{key:"hideDefaultErrorMessage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:5e3;setTimeout((function(){$("#sys-message-holder.alert-danger").slideUp("fast",(function(){$(this).removeClass("alert-danger").slideDown().addClass("hidden")}))}),e)}},{key:"hideParamSuccessMessage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:5e3;setTimeout((function(){$(".param-alert.alert-success").slideUp("fast",(function(){$(this).removeClass("alert-success").slideDown().addClass("hidden")}))}),e)}},{key:"hideParamErrorMessage",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:5e3;setTimeout((function(){$(".param-alert.alert-danger").slideUp("fast",(function(){$(this).removeClass("alert-danger").slideDown().addClass("hidden")}))}),e)}}])&&i(t.prototype,n),a&&i(t,a),Object.defineProperty(t,"prototype",{writable:!1}),e}()},20:function(e,t){e.exports="function _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\n\n/* =========================================================\n * bootstrap-datetimepicker.js\n * =========================================================\n * Copyright 2012 Stefan Petre\n *\n * Improvements by Andrew Rowls\n * Improvements by SÃ©bastien Malot\n * Improvements by Yun Lai\n * Improvements by Kenneth Henderick\n * Improvements by CuGBabyBeaR\n * Improvements by Christian Vaas <auspex@auspex.eu>\n *\n * Project URL : http://www.malot.fr/bootstrap-datetimepicker\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * ========================================================= */\n(function (factory) {\n  if (typeof define === 'function' && define.amd) define(['jquery'], factory);else if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === 'object') factory(require('jquery'));else factory(jQuery);\n})(function ($, undefined) {\n  // Add ECMA262-5 Array methods if not supported natively (IE8)\n  if (!('indexOf' in Array.prototype)) {\n    Array.prototype.indexOf = function (find, i) {\n      if (i === undefined) i = 0;\n      if (i < 0) i += this.length;\n      if (i < 0) i = 0;\n\n      for (var n = this.length; i < n; i++) {\n        if (i in this && this[i] === find) {\n          return i;\n        }\n      }\n\n      return -1;\n    };\n  }\n\n  function elementOrParentIsFixed(element) {\n    var $element = $(element);\n    var $checkElements = $element.add($element.parents());\n    var isFixed = false;\n    $checkElements.each(function () {\n      if ($(this).css('position') === 'fixed') {\n        isFixed = true;\n        return false;\n      }\n    });\n    return isFixed;\n  }\n\n  function UTCDate() {\n    return new Date(Date.UTC.apply(Date, arguments));\n  }\n\n  function UTCToday() {\n    var today = new Date();\n    return UTCDate(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate(), today.getUTCHours(), today.getUTCMinutes(), today.getUTCSeconds(), 0);\n  } // Picker object\n\n\n  var Datetimepicker = function Datetimepicker(element, options) {\n    var that = this;\n    this.element = $(element); // add container for single page application\n    // when page switch the datetimepicker div will be removed also.\n\n    this.container = options.container || 'body';\n    this.language = options.language || this.element.data('date-language') || 'en';\n    this.language = this.language in dates ? this.language : this.language.split('-')[0]; // fr-CA fallback to fr\n\n    this.language = this.language in dates ? this.language : 'en';\n    this.isRTL = dates[this.language].rtl || false;\n    this.formatType = options.formatType || this.element.data('format-type') || 'standard';\n    this.format = DPGlobal.parseFormat(options.format || this.element.data('date-format') || dates[this.language].format || DPGlobal.getDefaultFormat(this.formatType, 'input'), this.formatType);\n    this.isInline = false;\n    this.isVisible = false;\n    this.isInput = this.element.is('input');\n    this.fontAwesome = options.fontAwesome || this.element.data('font-awesome') || false;\n    this.bootcssVer = options.bootcssVer || (this.isInput ? this.element.is('.form-control') ? 3 : 2 : this.bootcssVer = this.element.is('.input-group') ? 3 : 2);\n    this.component = this.element.is('.date') ? this.bootcssVer == 3 ? this.element.find('.input-group-addon .glyphicon-th, .input-group-addon .glyphicon-time, .input-group-addon .glyphicon-remove, .input-group-addon .glyphicon-calendar, .input-group-addon .fa-calendar, .input-group-addon .fa-clock-o').parent() : this.element.find('.add-on .icon-th, .add-on .icon-time, .add-on .icon-calendar, .add-on .fa-calendar, .add-on .fa-clock-o').parent() : false;\n    this.componentReset = this.element.is('.date') ? this.bootcssVer == 3 ? this.element.find('.input-group-addon .glyphicon-remove, .input-group-addon .fa-times').parent() : this.element.find('.add-on .icon-remove, .add-on .fa-times').parent() : false;\n    this.hasInput = this.component && this.element.find('input').length;\n\n    if (this.component && this.component.length === 0) {\n      this.component = false;\n    }\n\n    this.linkField = options.linkField || this.element.data('link-field') || false;\n    this.linkFormat = DPGlobal.parseFormat(options.linkFormat || this.element.data('link-format') || DPGlobal.getDefaultFormat(this.formatType, 'link'), this.formatType);\n    this.minuteStep = options.minuteStep || this.element.data('minute-step') || 5;\n    this.pickerPosition = options.pickerPosition || this.element.data('picker-position') || 'bottom-right';\n    this.showMeridian = options.showMeridian || this.element.data('show-meridian') || false;\n    this.initialDate = options.initialDate || new Date();\n    this.zIndex = options.zIndex || this.element.data('z-index') || undefined;\n    this.title = typeof options.title === 'undefined' ? false : options.title;\n    this.defaultTimeZone = new Date().toString().split('(')[1].slice(0, -1);\n    this.timezone = options.timezone || this.defaultTimeZone;\n    this.icons = {\n      leftArrow: this.fontAwesome ? 'fa-arrow-left' : this.bootcssVer === 3 ? 'glyphicon-arrow-left' : 'icon-arrow-left',\n      rightArrow: this.fontAwesome ? 'fa-arrow-right' : this.bootcssVer === 3 ? 'glyphicon-arrow-right' : 'icon-arrow-right'\n    };\n    this.icontype = this.fontAwesome ? 'fa' : 'glyphicon';\n\n    this._attachEvents();\n\n    this.clickedOutside = function (e) {\n      // Clicked outside the datetimepicker, hide it\n      if ($(e.target).closest('.datetimepicker').length === 0) {\n        that.hide();\n      }\n    };\n\n    this.formatViewType = 'datetime';\n\n    if ('formatViewType' in options) {\n      this.formatViewType = options.formatViewType;\n    } else if ('formatViewType' in this.element.data()) {\n      this.formatViewType = this.element.data('formatViewType');\n    }\n\n    this.minView = 0;\n\n    if ('minView' in options) {\n      this.minView = options.minView;\n    } else if ('minView' in this.element.data()) {\n      this.minView = this.element.data('min-view');\n    }\n\n    this.minView = DPGlobal.convertViewMode(this.minView);\n    this.maxView = DPGlobal.modes.length - 1;\n\n    if ('maxView' in options) {\n      this.maxView = options.maxView;\n    } else if ('maxView' in this.element.data()) {\n      this.maxView = this.element.data('max-view');\n    }\n\n    this.maxView = DPGlobal.convertViewMode(this.maxView);\n    this.wheelViewModeNavigation = false;\n\n    if ('wheelViewModeNavigation' in options) {\n      this.wheelViewModeNavigation = options.wheelViewModeNavigation;\n    } else if ('wheelViewModeNavigation' in this.element.data()) {\n      this.wheelViewModeNavigation = this.element.data('view-mode-wheel-navigation');\n    }\n\n    this.wheelViewModeNavigationInverseDirection = false;\n\n    if ('wheelViewModeNavigationInverseDirection' in options) {\n      this.wheelViewModeNavigationInverseDirection = options.wheelViewModeNavigationInverseDirection;\n    } else if ('wheelViewModeNavigationInverseDirection' in this.element.data()) {\n      this.wheelViewModeNavigationInverseDirection = this.element.data('view-mode-wheel-navigation-inverse-dir');\n    }\n\n    this.wheelViewModeNavigationDelay = 100;\n\n    if ('wheelViewModeNavigationDelay' in options) {\n      this.wheelViewModeNavigationDelay = options.wheelViewModeNavigationDelay;\n    } else if ('wheelViewModeNavigationDelay' in this.element.data()) {\n      this.wheelViewModeNavigationDelay = this.element.data('view-mode-wheel-navigation-delay');\n    }\n\n    this.startViewMode = 2;\n\n    if ('startView' in options) {\n      this.startViewMode = options.startView;\n    } else if ('startView' in this.element.data()) {\n      this.startViewMode = this.element.data('start-view');\n    }\n\n    this.startViewMode = DPGlobal.convertViewMode(this.startViewMode);\n    this.viewMode = this.startViewMode;\n    this.viewSelect = this.minView;\n\n    if ('viewSelect' in options) {\n      this.viewSelect = options.viewSelect;\n    } else if ('viewSelect' in this.element.data()) {\n      this.viewSelect = this.element.data('view-select');\n    }\n\n    this.viewSelect = DPGlobal.convertViewMode(this.viewSelect);\n    this.forceParse = true;\n\n    if ('forceParse' in options) {\n      this.forceParse = options.forceParse;\n    } else if ('dateForceParse' in this.element.data()) {\n      this.forceParse = this.element.data('date-force-parse');\n    }\n\n    var template = this.bootcssVer === 3 ? DPGlobal.templateV3 : DPGlobal.template;\n\n    while (template.indexOf('{iconType}') !== -1) {\n      template = template.replace('{iconType}', this.icontype);\n    }\n\n    while (template.indexOf('{leftArrow}') !== -1) {\n      template = template.replace('{leftArrow}', this.icons.leftArrow);\n    }\n\n    while (template.indexOf('{rightArrow}') !== -1) {\n      template = template.replace('{rightArrow}', this.icons.rightArrow);\n    }\n\n    this.picker = $(template).appendTo(this.isInline ? this.element : this.container) // 'body')\n    .on({\n      click: $.proxy(this.click, this),\n      mousedown: $.proxy(this.mousedown, this)\n    });\n\n    if (this.wheelViewModeNavigation) {\n      if ($.fn.mousewheel) {\n        this.picker.on({\n          mousewheel: $.proxy(this.mousewheel, this)\n        });\n      } else {\n        console.log('Mouse Wheel event is not supported. Please include the jQuery Mouse Wheel plugin before enabling this option');\n      }\n    }\n\n    if (this.isInline) {\n      this.picker.addClass('datetimepicker-inline');\n    } else {\n      this.picker.addClass('datetimepicker-dropdown-' + this.pickerPosition + ' dropdown-menu');\n    }\n\n    if (this.isRTL) {\n      this.picker.addClass('datetimepicker-rtl');\n      var selector = this.bootcssVer === 3 ? '.prev span, .next span' : '.prev i, .next i';\n      this.picker.find(selector).toggleClass(this.icons.leftArrow + ' ' + this.icons.rightArrow);\n    }\n\n    $(document).on('mousedown', this.clickedOutside);\n    this.autoclose = false;\n\n    if ('autoclose' in options) {\n      this.autoclose = options.autoclose;\n    } else if ('dateAutoclose' in this.element.data()) {\n      this.autoclose = this.element.data('date-autoclose');\n    }\n\n    this.keyboardNavigation = true;\n\n    if ('keyboardNavigation' in options) {\n      this.keyboardNavigation = options.keyboardNavigation;\n    } else if ('dateKeyboardNavigation' in this.element.data()) {\n      this.keyboardNavigation = this.element.data('date-keyboard-navigation');\n    }\n\n    this.todayBtn = options.todayBtn || this.element.data('date-today-btn') || false;\n    this.clearBtn = options.clearBtn || this.element.data('date-clear-btn') || false;\n    this.todayHighlight = options.todayHighlight || this.element.data('date-today-highlight') || false;\n    this.weekStart = (options.weekStart || this.element.data('date-weekstart') || dates[this.language].weekStart || 0) % 7;\n    this.weekEnd = (this.weekStart + 6) % 7;\n    this.startDate = -Infinity;\n    this.endDate = Infinity;\n    this.datesDisabled = [];\n    this.daysOfWeekDisabled = [];\n    this.setStartDate(options.startDate || this.element.data('date-startdate'));\n    this.setEndDate(options.endDate || this.element.data('date-enddate'));\n    this.setDatesDisabled(options.datesDisabled || this.element.data('date-dates-disabled'));\n    this.setDaysOfWeekDisabled(options.daysOfWeekDisabled || this.element.data('date-days-of-week-disabled'));\n    this.setMinutesDisabled(options.minutesDisabled || this.element.data('date-minute-disabled'));\n    this.setHoursDisabled(options.hoursDisabled || this.element.data('date-hour-disabled'));\n    this.fillDow();\n    this.fillMonths();\n    this.update();\n    this.showMode();\n\n    if (this.isInline) {\n      this.show();\n    }\n  };\n\n  Datetimepicker.prototype = {\n    constructor: Datetimepicker,\n    _events: [],\n    _attachEvents: function _attachEvents() {\n      this._detachEvents();\n\n      if (this.isInput) {\n        // single input\n        this._events = [[this.element, {\n          focus: $.proxy(this.show, this),\n          keyup: $.proxy(this.update, this),\n          keydown: $.proxy(this.keydown, this)\n        }]];\n      } else if (this.component && this.hasInput) {\n        // component: input + button\n        this._events = [// For components that are not readonly, allow keyboard nav\n        [this.element.find('input'), {\n          focus: $.proxy(this.show, this),\n          keyup: $.proxy(this.update, this),\n          keydown: $.proxy(this.keydown, this)\n        }], [this.component, {\n          click: $.proxy(this.show, this)\n        }]];\n\n        if (this.componentReset) {\n          this._events.push([this.componentReset, {\n            click: $.proxy(this.reset, this)\n          }]);\n        }\n      } else if (this.element.is('div')) {\n        // inline datetimepicker\n        this.isInline = true;\n      } else {\n        this._events = [[this.element, {\n          click: $.proxy(this.show, this)\n        }]];\n      }\n\n      for (var i = 0, el, ev; i < this._events.length; i++) {\n        el = this._events[i][0];\n        ev = this._events[i][1];\n        el.on(ev);\n      }\n    },\n    _detachEvents: function _detachEvents() {\n      for (var i = 0, el, ev; i < this._events.length; i++) {\n        el = this._events[i][0];\n        ev = this._events[i][1];\n        el.off(ev);\n      }\n\n      this._events = [];\n    },\n    show: function show(e) {\n      this.picker.show();\n      this.height = this.component ? this.component.outerHeight() : this.element.outerHeight();\n\n      if (this.forceParse) {\n        this.update();\n      }\n\n      this.place();\n      $(window).on('resize', $.proxy(this.place, this));\n\n      if (e) {\n        e.stopPropagation();\n        e.preventDefault();\n      }\n\n      this.isVisible = true;\n      this.element.trigger({\n        type: 'show',\n        date: this.date\n      });\n    },\n    hide: function hide(e) {\n      if (!this.isVisible) return;\n      if (this.isInline) return;\n      this.picker.hide();\n      $(window).off('resize', this.place);\n      this.viewMode = this.startViewMode;\n      this.showMode();\n\n      if (!this.isInput) {\n        $(document).off('mousedown', this.hide);\n      }\n\n      if (this.forceParse && (this.isInput && this.element.val() || this.hasInput && this.element.find('input').val())) this.setValue();\n      this.isVisible = false;\n      this.element.trigger({\n        type: 'hide',\n        date: this.date\n      });\n    },\n    remove: function remove() {\n      this._detachEvents();\n\n      $(document).off('mousedown', this.clickedOutside);\n      this.picker.remove();\n      delete this.picker;\n      delete this.element.data().datetimepicker;\n    },\n    getDate: function getDate() {\n      var d = this.getUTCDate();\n      return new Date(d.getTime() + d.getTimezoneOffset() * 60000);\n    },\n    getUTCDate: function getUTCDate() {\n      return this.date;\n    },\n    getInitialDate: function getInitialDate() {\n      return this.initialDate;\n    },\n    setInitialDate: function setInitialDate(initialDate) {\n      this.initialDate = initialDate;\n    },\n    setDate: function setDate(d) {\n      this.setUTCDate(new Date(d.getTime() - d.getTimezoneOffset() * 60000));\n    },\n    setUTCDate: function setUTCDate(d) {\n      if (d >= this.startDate && d <= this.endDate) {\n        this.date = d;\n        this.setValue();\n        this.viewDate = this.date;\n        this.fill();\n      } else {\n        this.element.trigger({\n          type: 'outOfRange',\n          date: d,\n          startDate: this.startDate,\n          endDate: this.endDate\n        });\n      }\n    },\n    setFormat: function setFormat(format) {\n      this.format = DPGlobal.parseFormat(format, this.formatType);\n      var element;\n\n      if (this.isInput) {\n        element = this.element;\n      } else if (this.component) {\n        element = this.element.find('input');\n      }\n\n      if (element && element.val()) {\n        this.setValue();\n      }\n    },\n    setValue: function setValue() {\n      var formatted = this.getFormattedDate();\n\n      if (!this.isInput) {\n        if (this.component) {\n          this.element.find('input').val(formatted);\n        }\n\n        this.element.data('date', formatted);\n      } else {\n        this.element.val(formatted);\n      }\n\n      if (this.linkField) {\n        $('#' + this.linkField).val(this.getFormattedDate(this.linkFormat));\n      }\n    },\n    getFormattedDate: function getFormattedDate(format) {\n      if (format == undefined) format = this.format;\n      return DPGlobal.formatDate(this.date, format, this.language, this.formatType, this.timezone);\n    },\n    setStartDate: function setStartDate(startDate) {\n      this.startDate = startDate || -Infinity;\n\n      if (this.startDate !== -Infinity) {\n        this.startDate = DPGlobal.parseDate(this.startDate, this.format, this.language, this.formatType, this.timezone);\n      }\n\n      this.update();\n      this.updateNavArrows();\n    },\n    setEndDate: function setEndDate(endDate) {\n      this.endDate = endDate || Infinity;\n\n      if (this.endDate !== Infinity) {\n        this.endDate = DPGlobal.parseDate(this.endDate, this.format, this.language, this.formatType, this.timezone);\n      }\n\n      this.update();\n      this.updateNavArrows();\n    },\n    setDatesDisabled: function setDatesDisabled(datesDisabled) {\n      this.datesDisabled = datesDisabled || [];\n\n      if (!$.isArray(this.datesDisabled)) {\n        this.datesDisabled = this.datesDisabled.split(/,\\s*/);\n      }\n\n      this.datesDisabled = $.map(this.datesDisabled, function (d) {\n        return DPGlobal.parseDate(d, this.format, this.language, this.formatType, this.timezone).toDateString();\n      });\n      this.update();\n      this.updateNavArrows();\n    },\n    setTitle: function setTitle(selector, value) {\n      return this.picker.find(selector).find('th:eq(1)').text(this.title === false ? value : this.title);\n    },\n    setDaysOfWeekDisabled: function setDaysOfWeekDisabled(daysOfWeekDisabled) {\n      this.daysOfWeekDisabled = daysOfWeekDisabled || [];\n\n      if (!$.isArray(this.daysOfWeekDisabled)) {\n        this.daysOfWeekDisabled = this.daysOfWeekDisabled.split(/,\\s*/);\n      }\n\n      this.daysOfWeekDisabled = $.map(this.daysOfWeekDisabled, function (d) {\n        return parseInt(d, 10);\n      });\n      this.update();\n      this.updateNavArrows();\n    },\n    setMinutesDisabled: function setMinutesDisabled(minutesDisabled) {\n      this.minutesDisabled = minutesDisabled || [];\n\n      if (!$.isArray(this.minutesDisabled)) {\n        this.minutesDisabled = this.minutesDisabled.split(/,\\s*/);\n      }\n\n      this.minutesDisabled = $.map(this.minutesDisabled, function (d) {\n        return parseInt(d, 10);\n      });\n      this.update();\n      this.updateNavArrows();\n    },\n    setHoursDisabled: function setHoursDisabled(hoursDisabled) {\n      this.hoursDisabled = hoursDisabled || [];\n\n      if (!$.isArray(this.hoursDisabled)) {\n        this.hoursDisabled = this.hoursDisabled.split(/,\\s*/);\n      }\n\n      this.hoursDisabled = $.map(this.hoursDisabled, function (d) {\n        return parseInt(d, 10);\n      });\n      this.update();\n      this.updateNavArrows();\n    },\n    place: function place() {\n      if (this.isInline) return;\n\n      if (!this.zIndex) {\n        var index_highest = 0;\n        $('div').each(function () {\n          var index_current = parseInt($(this).css('zIndex'), 10);\n\n          if (index_current > index_highest) {\n            index_highest = index_current;\n          }\n        });\n        this.zIndex = index_highest + 10;\n      }\n\n      var offset, top, left, containerOffset;\n\n      if (this.container instanceof $) {\n        containerOffset = this.container.offset();\n      } else {\n        containerOffset = $(this.container).offset();\n      }\n\n      if (this.component) {\n        offset = this.component.offset();\n        left = offset.left;\n\n        if (this.pickerPosition == 'bottom-left' || this.pickerPosition == 'top-left') {\n          left += this.component.outerWidth() - this.picker.outerWidth();\n        }\n      } else {\n        offset = this.element.offset();\n        left = offset.left;\n\n        if (this.pickerPosition == 'bottom-left' || this.pickerPosition == 'top-left') {\n          left += this.element.outerWidth() - this.picker.outerWidth();\n        }\n      }\n\n      var bodyWidth = document.body.clientWidth || window.innerWidth;\n\n      if (left + 220 > bodyWidth) {\n        left = bodyWidth - 220;\n      }\n\n      if (this.pickerPosition == 'top-left' || this.pickerPosition == 'top-right') {\n        top = offset.top - this.picker.outerHeight();\n      } else {\n        top = offset.top + this.height;\n      }\n\n      top = top - containerOffset.top;\n      left = left - containerOffset.left;\n      this.picker.css({\n        top: top,\n        left: left,\n        zIndex: this.zIndex\n      });\n    },\n    update: function update() {\n      var date,\n          fromArgs = false;\n\n      if (arguments && arguments.length && (typeof arguments[0] === 'string' || arguments[0] instanceof Date)) {\n        date = arguments[0];\n        fromArgs = true;\n      } else {\n        date = (this.isInput ? this.element.val() : this.element.find('input').val()) || this.element.data('date') || this.initialDate;\n\n        if (typeof date == 'string' || date instanceof String) {\n          date = date.replace(/^\\s+|\\s+$/g, '');\n        }\n      }\n\n      if (!date) {\n        date = new Date();\n        fromArgs = false;\n      }\n\n      this.date = DPGlobal.parseDate(date, this.format, this.language, this.formatType, this.timezone);\n      if (fromArgs) this.setValue();\n\n      if (this.date < this.startDate) {\n        this.viewDate = new Date(this.startDate);\n      } else if (this.date > this.endDate) {\n        this.viewDate = new Date(this.endDate);\n      } else {\n        this.viewDate = new Date(this.date);\n      }\n\n      this.fill();\n    },\n    fillDow: function fillDow() {\n      var dowCnt = this.weekStart,\n          html = '<tr>';\n\n      while (dowCnt < this.weekStart + 7) {\n        html += '<th class=\"dow\">' + dates[this.language].daysMin[dowCnt++ % 7] + '</th>';\n      }\n\n      html += '</tr>';\n      this.picker.find('.datetimepicker-days thead').append(html);\n    },\n    fillMonths: function fillMonths() {\n      var html = '',\n          i = 0;\n\n      while (i < 12) {\n        html += '<span class=\"month\">' + dates[this.language].monthsShort[i++] + '</span>';\n      }\n\n      this.picker.find('.datetimepicker-months td').html(html);\n    },\n    fill: function fill() {\n      if (this.date == null || this.viewDate == null) {\n        return;\n      }\n\n      var d = new Date(this.viewDate),\n          year = d.getUTCFullYear(),\n          month = d.getUTCMonth(),\n          dayMonth = d.getUTCDate(),\n          hours = d.getUTCHours(),\n          minutes = d.getUTCMinutes(),\n          startYear = this.startDate !== -Infinity ? this.startDate.getUTCFullYear() : -Infinity,\n          startMonth = this.startDate !== -Infinity ? this.startDate.getUTCMonth() : -Infinity,\n          endYear = this.endDate !== Infinity ? this.endDate.getUTCFullYear() : Infinity,\n          endMonth = this.endDate !== Infinity ? this.endDate.getUTCMonth() + 1 : Infinity,\n          currentDate = new UTCDate(this.date.getUTCFullYear(), this.date.getUTCMonth(), this.date.getUTCDate()).valueOf(),\n          today = new Date();\n      this.setTitle('.datetimepicker-days', dates[this.language].months[month] + ' ' + year);\n\n      if (this.formatViewType == 'time') {\n        var formatted = this.getFormattedDate();\n        this.setTitle('.datetimepicker-hours', formatted);\n        this.setTitle('.datetimepicker-minutes', formatted);\n      } else {\n        this.setTitle('.datetimepicker-hours', dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);\n        this.setTitle('.datetimepicker-minutes', dayMonth + ' ' + dates[this.language].months[month] + ' ' + year);\n      }\n\n      this.picker.find('tfoot th.today').text(dates[this.language].today || dates['en'].today).toggle(this.todayBtn !== false);\n      this.picker.find('tfoot th.clear').text(dates[this.language].clear || dates['en'].clear).toggle(this.clearBtn !== false);\n      this.updateNavArrows();\n      this.fillMonths();\n      /*var prevMonth = UTCDate(year, month, 0,0,0,0,0);\n       prevMonth.setUTCDate(prevMonth.getDate() - (prevMonth.getUTCDay() - this.weekStart + 7)%7);*/\n\n      var prevMonth = UTCDate(year, month - 1, 28, 0, 0, 0, 0),\n          day = DPGlobal.getDaysInMonth(prevMonth.getUTCFullYear(), prevMonth.getUTCMonth());\n      prevMonth.setUTCDate(day);\n      prevMonth.setUTCDate(day - (prevMonth.getUTCDay() - this.weekStart + 7) % 7);\n      var nextMonth = new Date(prevMonth);\n      nextMonth.setUTCDate(nextMonth.getUTCDate() + 42);\n      nextMonth = nextMonth.valueOf();\n      var html = [];\n      var clsName;\n\n      while (prevMonth.valueOf() < nextMonth) {\n        if (prevMonth.getUTCDay() == this.weekStart) {\n          html.push('<tr>');\n        }\n\n        clsName = '';\n\n        if (prevMonth.getUTCFullYear() < year || prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() < month) {\n          clsName += ' old';\n        } else if (prevMonth.getUTCFullYear() > year || prevMonth.getUTCFullYear() == year && prevMonth.getUTCMonth() > month) {\n          clsName += ' new';\n        } // Compare internal UTC date with local today, not UTC today\n\n\n        if (this.todayHighlight && prevMonth.getUTCFullYear() == today.getFullYear() && prevMonth.getUTCMonth() == today.getMonth() && prevMonth.getUTCDate() == today.getDate()) {\n          clsName += ' today';\n        }\n\n        if (prevMonth.valueOf() == currentDate) {\n          clsName += ' active';\n        }\n\n        if (prevMonth.valueOf() + 86400000 <= this.startDate || prevMonth.valueOf() > this.endDate || $.inArray(prevMonth.getUTCDay(), this.daysOfWeekDisabled) !== -1 || $.inArray(prevMonth.toDateString(), this.datesDisabled) !== -1) {\n          clsName += ' disabled';\n        }\n\n        html.push('<td class=\"day' + clsName + '\">' + prevMonth.getUTCDate() + '</td>');\n\n        if (prevMonth.getUTCDay() == this.weekEnd) {\n          html.push('</tr>');\n        }\n\n        prevMonth.setUTCDate(prevMonth.getUTCDate() + 1);\n      }\n\n      this.picker.find('.datetimepicker-days tbody').empty().append(html.join(''));\n      html = [];\n      var txt = '',\n          meridian = '',\n          meridianOld = '';\n      var hoursDisabled = this.hoursDisabled || [];\n\n      for (var i = 0; i < 24; i++) {\n        if (hoursDisabled.indexOf(i) !== -1) continue;\n        var actual = UTCDate(year, month, dayMonth, i);\n        clsName = ''; // We want the previous hour for the startDate\n\n        if (actual.valueOf() + 3600000 <= this.startDate || actual.valueOf() > this.endDate) {\n          clsName += ' disabled';\n        } else if (hours == i) {\n          clsName += ' active';\n        }\n\n        if (this.showMeridian && dates[this.language].meridiem.length == 2) {\n          meridian = i < 12 ? dates[this.language].meridiem[0] : dates[this.language].meridiem[1];\n\n          if (meridian != meridianOld) {\n            if (meridianOld != '') {\n              html.push('</fieldset>');\n            }\n\n            html.push('<fieldset class=\"hour\"><legend>' + meridian.toUpperCase() + '</legend>');\n          }\n\n          meridianOld = meridian;\n          txt = i % 12 ? i % 12 : 12;\n          html.push('<span class=\"hour' + clsName + ' hour_' + (i < 12 ? 'am' : 'pm') + '\">' + txt + '</span>');\n\n          if (i == 23) {\n            html.push('</fieldset>');\n          }\n        } else {\n          txt = i + ':00';\n          html.push('<span class=\"hour' + clsName + '\">' + txt + '</span>');\n        }\n      }\n\n      this.picker.find('.datetimepicker-hours td').html(html.join(''));\n      html = [];\n      txt = '', meridian = '', meridianOld = '';\n      var minutesDisabled = this.minutesDisabled || [];\n\n      for (var i = 0; i < 60; i += this.minuteStep) {\n        if (minutesDisabled.indexOf(i) !== -1) continue;\n        var actual = UTCDate(year, month, dayMonth, hours, i, 0);\n        clsName = '';\n\n        if (actual.valueOf() < this.startDate || actual.valueOf() > this.endDate) {\n          clsName += ' disabled';\n        } else if (Math.floor(minutes / this.minuteStep) == Math.floor(i / this.minuteStep)) {\n          clsName += ' active';\n        }\n\n        if (this.showMeridian && dates[this.language].meridiem.length == 2) {\n          meridian = hours < 12 ? dates[this.language].meridiem[0] : dates[this.language].meridiem[1];\n\n          if (meridian != meridianOld) {\n            if (meridianOld != '') {\n              html.push('</fieldset>');\n            }\n\n            html.push('<fieldset class=\"minute\"><legend>' + meridian.toUpperCase() + '</legend>');\n          }\n\n          meridianOld = meridian;\n          txt = hours % 12 ? hours % 12 : 12; //html.push('<span class=\"minute'+clsName+' minute_'+(hours<12?'am':'pm')+'\">'+txt+'</span>');\n\n          html.push('<span class=\"minute' + clsName + '\">' + txt + ':' + (i < 10 ? '0' + i : i) + '</span>');\n\n          if (i == 59) {\n            html.push('</fieldset>');\n          }\n        } else {\n          txt = i + ':00'; //html.push('<span class=\"hour'+clsName+'\">'+txt+'</span>');\n\n          html.push('<span class=\"minute' + clsName + '\">' + hours + ':' + (i < 10 ? '0' + i : i) + '</span>');\n        }\n      }\n\n      this.picker.find('.datetimepicker-minutes td').html(html.join(''));\n      var currentYear = this.date.getUTCFullYear();\n      var months = this.setTitle('.datetimepicker-months', year).end().find('span').removeClass('active');\n\n      if (currentYear == year) {\n        // getUTCMonths() returns 0 based, and we need to select the next one\n        // To cater bootstrap 2 we don't need to select the next one\n        var offset = months.length - 12;\n        months.eq(this.date.getUTCMonth() + offset).addClass('active');\n      }\n\n      if (year < startYear || year > endYear) {\n        months.addClass('disabled');\n      }\n\n      if (year == startYear) {\n        months.slice(0, startMonth).addClass('disabled');\n      }\n\n      if (year == endYear) {\n        months.slice(endMonth).addClass('disabled');\n      }\n\n      html = '';\n      year = parseInt(year / 10, 10) * 10;\n      var yearCont = this.setTitle('.datetimepicker-years', year + '-' + (year + 9)).end().find('td');\n      year -= 1;\n\n      for (var i = -1; i < 11; i++) {\n        html += '<span class=\"year' + (i == -1 || i == 10 ? ' old' : '') + (currentYear == year ? ' active' : '') + (year < startYear || year > endYear ? ' disabled' : '') + '\">' + year + '</span>';\n        year += 1;\n      }\n\n      yearCont.html(html);\n      this.place();\n    },\n    updateNavArrows: function updateNavArrows() {\n      var d = new Date(this.viewDate),\n          year = d.getUTCFullYear(),\n          month = d.getUTCMonth(),\n          day = d.getUTCDate(),\n          hour = d.getUTCHours();\n\n      switch (this.viewMode) {\n        case 0:\n          if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth() && day <= this.startDate.getUTCDate() && hour <= this.startDate.getUTCHours()) {\n            this.picker.find('.prev').css({\n              visibility: 'hidden'\n            });\n          } else {\n            this.picker.find('.prev').css({\n              visibility: 'visible'\n            });\n          }\n\n          if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth() && day >= this.endDate.getUTCDate() && hour >= this.endDate.getUTCHours()) {\n            this.picker.find('.next').css({\n              visibility: 'hidden'\n            });\n          } else {\n            this.picker.find('.next').css({\n              visibility: 'visible'\n            });\n          }\n\n          break;\n\n        case 1:\n          if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth() && day <= this.startDate.getUTCDate()) {\n            this.picker.find('.prev').css({\n              visibility: 'hidden'\n            });\n          } else {\n            this.picker.find('.prev').css({\n              visibility: 'visible'\n            });\n          }\n\n          if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth() && day >= this.endDate.getUTCDate()) {\n            this.picker.find('.next').css({\n              visibility: 'hidden'\n            });\n          } else {\n            this.picker.find('.next').css({\n              visibility: 'visible'\n            });\n          }\n\n          break;\n\n        case 2:\n          if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear() && month <= this.startDate.getUTCMonth()) {\n            this.picker.find('.prev').css({\n              visibility: 'hidden'\n            });\n          } else {\n            this.picker.find('.prev').css({\n              visibility: 'visible'\n            });\n          }\n\n          if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear() && month >= this.endDate.getUTCMonth()) {\n            this.picker.find('.next').css({\n              visibility: 'hidden'\n            });\n          } else {\n            this.picker.find('.next').css({\n              visibility: 'visible'\n            });\n          }\n\n          break;\n\n        case 3:\n        case 4:\n          if (this.startDate !== -Infinity && year <= this.startDate.getUTCFullYear()) {\n            this.picker.find('.prev').css({\n              visibility: 'hidden'\n            });\n          } else {\n            this.picker.find('.prev').css({\n              visibility: 'visible'\n            });\n          }\n\n          if (this.endDate !== Infinity && year >= this.endDate.getUTCFullYear()) {\n            this.picker.find('.next').css({\n              visibility: 'hidden'\n            });\n          } else {\n            this.picker.find('.next').css({\n              visibility: 'visible'\n            });\n          }\n\n          break;\n      }\n    },\n    mousewheel: function mousewheel(e) {\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (this.wheelPause) {\n        return;\n      }\n\n      this.wheelPause = true;\n      var originalEvent = e.originalEvent;\n      var delta = originalEvent.wheelDelta;\n      var mode = delta > 0 ? 1 : delta === 0 ? 0 : -1;\n\n      if (this.wheelViewModeNavigationInverseDirection) {\n        mode = -mode;\n      }\n\n      this.showMode(mode);\n      setTimeout($.proxy(function () {\n        this.wheelPause = false;\n      }, this), this.wheelViewModeNavigationDelay);\n    },\n    click: function click(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var target = $(e.target).closest('span, td, th, legend');\n\n      if (target.is('.' + this.icontype)) {\n        target = $(target).parent().closest('span, td, th, legend');\n      }\n\n      if (target.length == 1) {\n        if (target.is('.disabled')) {\n          this.element.trigger({\n            type: 'outOfRange',\n            date: this.viewDate,\n            startDate: this.startDate,\n            endDate: this.endDate\n          });\n          return;\n        }\n\n        switch (target[0].nodeName.toLowerCase()) {\n          case 'th':\n            switch (target[0].className) {\n              case 'switch':\n                this.showMode(1);\n                break;\n\n              case 'prev':\n              case 'next':\n                var dir = DPGlobal.modes[this.viewMode].navStep * (target[0].className == 'prev' ? -1 : 1);\n\n                switch (this.viewMode) {\n                  case 0:\n                    this.viewDate = this.moveHour(this.viewDate, dir);\n                    break;\n\n                  case 1:\n                    this.viewDate = this.moveDate(this.viewDate, dir);\n                    break;\n\n                  case 2:\n                    this.viewDate = this.moveMonth(this.viewDate, dir);\n                    break;\n\n                  case 3:\n                  case 4:\n                    this.viewDate = this.moveYear(this.viewDate, dir);\n                    break;\n                }\n\n                this.fill();\n                this.element.trigger({\n                  type: target[0].className + ':' + this.convertViewModeText(this.viewMode),\n                  date: this.viewDate,\n                  startDate: this.startDate,\n                  endDate: this.endDate\n                });\n                break;\n\n              case 'clear':\n                this.reset();\n\n                if (this.autoclose) {\n                  this.hide();\n                }\n\n                break;\n\n              case 'today':\n                var date = new Date();\n                date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0); // Respect startDate and endDate.\n\n                if (date < this.startDate) date = this.startDate;else if (date > this.endDate) date = this.endDate;\n                this.viewMode = this.startViewMode;\n                this.showMode(0);\n\n                this._setDate(date);\n\n                this.fill();\n\n                if (this.autoclose) {\n                  this.hide();\n                }\n\n                break;\n            }\n\n            break;\n\n          case 'span':\n            if (!target.is('.disabled')) {\n              var year = this.viewDate.getUTCFullYear(),\n                  month = this.viewDate.getUTCMonth(),\n                  day = this.viewDate.getUTCDate(),\n                  hours = this.viewDate.getUTCHours(),\n                  minutes = this.viewDate.getUTCMinutes(),\n                  seconds = this.viewDate.getUTCSeconds();\n\n              if (target.is('.month')) {\n                this.viewDate.setUTCDate(1);\n                month = target.parent().find('span').index(target);\n                day = this.viewDate.getUTCDate();\n                this.viewDate.setUTCMonth(month);\n                this.element.trigger({\n                  type: 'changeMonth',\n                  date: this.viewDate\n                });\n\n                if (this.viewSelect >= 3) {\n                  this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));\n                }\n              } else if (target.is('.year')) {\n                this.viewDate.setUTCDate(1);\n                year = parseInt(target.text(), 10) || 0;\n                this.viewDate.setUTCFullYear(year);\n                this.element.trigger({\n                  type: 'changeYear',\n                  date: this.viewDate\n                });\n\n                if (this.viewSelect >= 4) {\n                  this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));\n                }\n              } else if (target.is('.hour')) {\n                hours = parseInt(target.text(), 10) || 0;\n\n                if (target.hasClass('hour_am') || target.hasClass('hour_pm')) {\n                  if (hours == 12 && target.hasClass('hour_am')) {\n                    hours = 0;\n                  } else if (hours != 12 && target.hasClass('hour_pm')) {\n                    hours += 12;\n                  }\n                }\n\n                this.viewDate.setUTCHours(hours);\n                this.element.trigger({\n                  type: 'changeHour',\n                  date: this.viewDate\n                });\n\n                if (this.viewSelect >= 1) {\n                  this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));\n                }\n              } else if (target.is('.minute')) {\n                minutes = parseInt(target.text().substr(target.text().indexOf(':') + 1), 10) || 0;\n                this.viewDate.setUTCMinutes(minutes);\n                this.element.trigger({\n                  type: 'changeMinute',\n                  date: this.viewDate\n                });\n\n                if (this.viewSelect >= 0) {\n                  this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));\n                }\n              }\n\n              if (this.viewMode != 0) {\n                var oldViewMode = this.viewMode;\n                this.showMode(-1);\n                this.fill();\n\n                if (oldViewMode == this.viewMode && this.autoclose) {\n                  this.hide();\n                }\n              } else {\n                this.fill();\n\n                if (this.autoclose) {\n                  this.hide();\n                }\n              }\n            }\n\n            break;\n\n          case 'td':\n            if (target.is('.day') && !target.is('.disabled')) {\n              var day = parseInt(target.text(), 10) || 1;\n              var year = this.viewDate.getUTCFullYear(),\n                  month = this.viewDate.getUTCMonth(),\n                  hours = this.viewDate.getUTCHours(),\n                  minutes = this.viewDate.getUTCMinutes(),\n                  seconds = this.viewDate.getUTCSeconds();\n\n              if (target.is('.old')) {\n                if (month === 0) {\n                  month = 11;\n                  year -= 1;\n                } else {\n                  month -= 1;\n                }\n              } else if (target.is('.new')) {\n                if (month == 11) {\n                  month = 0;\n                  year += 1;\n                } else {\n                  month += 1;\n                }\n              }\n\n              this.viewDate.setUTCFullYear(year);\n              this.viewDate.setUTCMonth(month, day);\n              this.element.trigger({\n                type: 'changeDay',\n                date: this.viewDate\n              });\n\n              if (this.viewSelect >= 2) {\n                this._setDate(UTCDate(year, month, day, hours, minutes, seconds, 0));\n              }\n            }\n\n            var oldViewMode = this.viewMode;\n            this.showMode(-1);\n            this.fill();\n\n            if (oldViewMode == this.viewMode && this.autoclose) {\n              this.hide();\n            }\n\n            break;\n        }\n      }\n    },\n    _setDate: function _setDate(date, which) {\n      if (!which || which == 'date') this.date = date;\n      if (!which || which == 'view') this.viewDate = date;\n      this.fill();\n      this.setValue();\n      var element;\n\n      if (this.isInput) {\n        element = this.element;\n      } else if (this.component) {\n        element = this.element.find('input');\n      }\n\n      if (element) {\n        element.change();\n\n        if (this.autoclose && (!which || which == 'date')) {//this.hide();\n        }\n      }\n\n      this.element.trigger({\n        type: 'changeDate',\n        date: this.getDate()\n      });\n      if (date == null) this.date = this.viewDate;\n    },\n    moveMinute: function moveMinute(date, dir) {\n      if (!dir) return date;\n      var new_date = new Date(date.valueOf()); //dir = dir > 0 ? 1 : -1;\n\n      new_date.setUTCMinutes(new_date.getUTCMinutes() + dir * this.minuteStep);\n      return new_date;\n    },\n    moveHour: function moveHour(date, dir) {\n      if (!dir) return date;\n      var new_date = new Date(date.valueOf()); //dir = dir > 0 ? 1 : -1;\n\n      new_date.setUTCHours(new_date.getUTCHours() + dir);\n      return new_date;\n    },\n    moveDate: function moveDate(date, dir) {\n      if (!dir) return date;\n      var new_date = new Date(date.valueOf()); //dir = dir > 0 ? 1 : -1;\n\n      new_date.setUTCDate(new_date.getUTCDate() + dir);\n      return new_date;\n    },\n    moveMonth: function moveMonth(date, dir) {\n      if (!dir) return date;\n      var new_date = new Date(date.valueOf()),\n          day = new_date.getUTCDate(),\n          month = new_date.getUTCMonth(),\n          mag = Math.abs(dir),\n          new_month,\n          test;\n      dir = dir > 0 ? 1 : -1;\n\n      if (mag == 1) {\n        test = dir == -1 // If going back one month, make sure month is not current month\n        // (eg, Mar 31 -> Feb 31 == Feb 28, not Mar 02)\n        ? function () {\n          return new_date.getUTCMonth() == month;\n        } // If going forward one month, make sure month is as expected\n        // (eg, Jan 31 -> Feb 31 == Feb 28, not Mar 02)\n        : function () {\n          return new_date.getUTCMonth() != new_month;\n        };\n        new_month = month + dir;\n        new_date.setUTCMonth(new_month); // Dec -> Jan (12) or Jan -> Dec (-1) -- limit expected date to 0-11\n\n        if (new_month < 0 || new_month > 11) new_month = (new_month + 12) % 12;\n      } else {\n        // For magnitudes >1, move one month at a time...\n        for (var i = 0; i < mag; i++) {\n          // ...which might decrease the day (eg, Jan 31 to Feb 28, etc)...\n          new_date = this.moveMonth(new_date, dir);\n        } // ...then reset the day, keeping it in the new month\n\n\n        new_month = new_date.getUTCMonth();\n        new_date.setUTCDate(day);\n\n        test = function test() {\n          return new_month != new_date.getUTCMonth();\n        };\n      } // Common date-resetting loop -- if date is beyond end of month, make it\n      // end of month\n\n\n      while (test()) {\n        new_date.setUTCDate(--day);\n        new_date.setUTCMonth(new_month);\n      }\n\n      return new_date;\n    },\n    moveYear: function moveYear(date, dir) {\n      return this.moveMonth(date, dir * 12);\n    },\n    dateWithinRange: function dateWithinRange(date) {\n      return date >= this.startDate && date <= this.endDate;\n    },\n    keydown: function keydown(e) {\n      if (this.picker.is(':not(:visible)')) {\n        if (e.keyCode == 27) // allow escape to hide and re-show picker\n          this.show();\n        return;\n      }\n\n      var dateChanged = false,\n          dir,\n          day,\n          month,\n          newDate,\n          newViewDate;\n\n      switch (e.keyCode) {\n        case 27:\n          // escape\n          this.hide();\n          e.preventDefault();\n          break;\n\n        case 37: // left\n\n        case 39:\n          // right\n          if (!this.keyboardNavigation) break;\n          dir = e.keyCode == 37 ? -1 : 1;\n          viewMode = this.viewMode;\n\n          if (e.ctrlKey) {\n            viewMode += 2;\n          } else if (e.shiftKey) {\n            viewMode += 1;\n          }\n\n          if (viewMode == 4) {\n            newDate = this.moveYear(this.date, dir);\n            newViewDate = this.moveYear(this.viewDate, dir);\n          } else if (viewMode == 3) {\n            newDate = this.moveMonth(this.date, dir);\n            newViewDate = this.moveMonth(this.viewDate, dir);\n          } else if (viewMode == 2) {\n            newDate = this.moveDate(this.date, dir);\n            newViewDate = this.moveDate(this.viewDate, dir);\n          } else if (viewMode == 1) {\n            newDate = this.moveHour(this.date, dir);\n            newViewDate = this.moveHour(this.viewDate, dir);\n          } else if (viewMode == 0) {\n            newDate = this.moveMinute(this.date, dir);\n            newViewDate = this.moveMinute(this.viewDate, dir);\n          }\n\n          if (this.dateWithinRange(newDate)) {\n            this.date = newDate;\n            this.viewDate = newViewDate;\n            this.setValue();\n            this.update();\n            e.preventDefault();\n            dateChanged = true;\n          }\n\n          break;\n\n        case 38: // up\n\n        case 40:\n          // down\n          if (!this.keyboardNavigation) break;\n          dir = e.keyCode == 38 ? -1 : 1;\n          viewMode = this.viewMode;\n\n          if (e.ctrlKey) {\n            viewMode += 2;\n          } else if (e.shiftKey) {\n            viewMode += 1;\n          }\n\n          if (viewMode == 4) {\n            newDate = this.moveYear(this.date, dir);\n            newViewDate = this.moveYear(this.viewDate, dir);\n          } else if (viewMode == 3) {\n            newDate = this.moveMonth(this.date, dir);\n            newViewDate = this.moveMonth(this.viewDate, dir);\n          } else if (viewMode == 2) {\n            newDate = this.moveDate(this.date, dir * 7);\n            newViewDate = this.moveDate(this.viewDate, dir * 7);\n          } else if (viewMode == 1) {\n            if (this.showMeridian) {\n              newDate = this.moveHour(this.date, dir * 6);\n              newViewDate = this.moveHour(this.viewDate, dir * 6);\n            } else {\n              newDate = this.moveHour(this.date, dir * 4);\n              newViewDate = this.moveHour(this.viewDate, dir * 4);\n            }\n          } else if (viewMode == 0) {\n            newDate = this.moveMinute(this.date, dir * 4);\n            newViewDate = this.moveMinute(this.viewDate, dir * 4);\n          }\n\n          if (this.dateWithinRange(newDate)) {\n            this.date = newDate;\n            this.viewDate = newViewDate;\n            this.setValue();\n            this.update();\n            e.preventDefault();\n            dateChanged = true;\n          }\n\n          break;\n\n        case 13:\n          // enter\n          if (this.viewMode != 0) {\n            var oldViewMode = this.viewMode;\n            this.showMode(-1);\n            this.fill();\n\n            if (oldViewMode == this.viewMode && this.autoclose) {\n              this.hide();\n            }\n          } else {\n            this.fill();\n\n            if (this.autoclose) {\n              this.hide();\n            }\n          }\n\n          e.preventDefault();\n          break;\n\n        case 9:\n          // tab\n          this.hide();\n          break;\n      }\n\n      if (dateChanged) {\n        var element;\n\n        if (this.isInput) {\n          element = this.element;\n        } else if (this.component) {\n          element = this.element.find('input');\n        }\n\n        if (element) {\n          element.change();\n        }\n\n        this.element.trigger({\n          type: 'changeDate',\n          date: this.getDate()\n        });\n      }\n    },\n    showMode: function showMode(dir) {\n      if (dir) {\n        var newViewMode = Math.max(0, Math.min(DPGlobal.modes.length - 1, this.viewMode + dir));\n\n        if (newViewMode >= this.minView && newViewMode <= this.maxView) {\n          this.element.trigger({\n            type: 'changeMode',\n            date: this.viewDate,\n            oldViewMode: this.viewMode,\n            newViewMode: newViewMode\n          });\n          this.viewMode = newViewMode;\n        }\n      }\n      /*\n       vitalets: fixing bug of very special conditions:\n       jquery 1.7.1 + webkit + show inline datetimepicker in bootstrap popover.\n       Method show() does not set display css correctly and datetimepicker is not shown.\n       Changed to .css('display', 'block') solve the problem.\n       See https://github.com/vitalets/x-editable/issues/37\n        In jquery 1.7.2+ everything works fine.\n       */\n      //this.picker.find('>div').hide().filter('.datetimepicker-'+DPGlobal.modes[this.viewMode].clsName).show();\n\n\n      this.picker.find('>div').hide().filter('.datetimepicker-' + DPGlobal.modes[this.viewMode].clsName).css('display', 'block');\n      this.updateNavArrows();\n    },\n    reset: function reset(e) {\n      this._setDate(null, 'date');\n    },\n    convertViewModeText: function convertViewModeText(viewMode) {\n      switch (viewMode) {\n        case 4:\n          return 'decade';\n\n        case 3:\n          return 'year';\n\n        case 2:\n          return 'month';\n\n        case 1:\n          return 'day';\n\n        case 0:\n          return 'hour';\n      }\n    }\n  };\n  var old = $.fn.datetimepicker;\n\n  $.fn.datetimepicker = function (option) {\n    var args = Array.apply(null, arguments);\n    args.shift();\n    var internal_return;\n    this.each(function () {\n      var $this = $(this),\n          data = $this.data('datetimepicker'),\n          options = _typeof(option) == 'object' && option;\n\n      if (!data) {\n        $this.data('datetimepicker', data = new Datetimepicker(this, $.extend({}, $.fn.datetimepicker.defaults, options)));\n      }\n\n      if (typeof option == 'string' && typeof data[option] == 'function') {\n        internal_return = data[option].apply(data, args);\n\n        if (internal_return !== undefined) {\n          return false;\n        }\n      }\n    });\n    if (internal_return !== undefined) return internal_return;else return this;\n  };\n\n  $.fn.datetimepicker.defaults = {};\n  $.fn.datetimepicker.Constructor = Datetimepicker;\n  var dates = $.fn.datetimepicker.dates = {\n    en: {\n      days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n      daysShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'],\n      daysMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],\n      months: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n      monthsShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n      meridiem: ['am', 'pm'],\n      suffix: ['st', 'nd', 'rd', 'th'],\n      today: 'Today',\n      clear: 'Clear'\n    }\n  };\n  var DPGlobal = {\n    modes: [{\n      clsName: 'minutes',\n      navFnc: 'Hours',\n      navStep: 1\n    }, {\n      clsName: 'hours',\n      navFnc: 'Date',\n      navStep: 1\n    }, {\n      clsName: 'days',\n      navFnc: 'Month',\n      navStep: 1\n    }, {\n      clsName: 'months',\n      navFnc: 'FullYear',\n      navStep: 1\n    }, {\n      clsName: 'years',\n      navFnc: 'FullYear',\n      navStep: 10\n    }],\n    isLeapYear: function isLeapYear(year) {\n      return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n    },\n    getDaysInMonth: function getDaysInMonth(year, month) {\n      return [31, DPGlobal.isLeapYear(year) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month];\n    },\n    getDefaultFormat: function getDefaultFormat(type, field) {\n      if (type == 'standard') {\n        if (field == 'input') return 'yyyy-mm-dd hh:ii';else return 'yyyy-mm-dd hh:ii:ss';\n      } else if (type == 'php') {\n        if (field == 'input') return 'Y-m-d H:i';else return 'Y-m-d H:i:s';\n      } else {\n        throw new Error('Invalid format type.');\n      }\n    },\n    validParts: function validParts(type) {\n      if (type == 'standard') {\n        return /t|hh?|HH?|p|P|z|Z|ii?|ss?|dd?|DD?|mm?|MM?|yy(?:yy)?/g;\n      } else if (type == 'php') {\n        return /[dDjlNwzFmMnStyYaABgGhHis]/g;\n      } else {\n        throw new Error('Invalid format type.');\n      }\n    },\n    nonpunctuation: /[^ -\\/:-@\\[-`{-~\\t\\n\\rTZ]+/g,\n    parseFormat: function parseFormat(format, type) {\n      // IE treats \\0 as a string end in inputs (truncating the value),\n      // so it's a bad format delimiter, anyway\n      var separators = format.replace(this.validParts(type), '\\0').split('\\0'),\n          parts = format.match(this.validParts(type));\n\n      if (!separators || !separators.length || !parts || parts.length == 0) {\n        throw new Error('Invalid date format.');\n      }\n\n      return {\n        separators: separators,\n        parts: parts\n      };\n    },\n    parseDate: function parseDate(date, format, language, type, timezone) {\n      if (date instanceof Date) {\n        var dateUTC = new Date(date.valueOf() - date.getTimezoneOffset() * 60000);\n        dateUTC.setMilliseconds(0);\n        return dateUTC;\n      }\n\n      if (/^\\d{4}\\-\\d{1,2}\\-\\d{1,2}$/.test(date)) {\n        format = this.parseFormat('yyyy-mm-dd', type);\n      }\n\n      if (/^\\d{4}\\-\\d{1,2}\\-\\d{1,2}[T ]\\d{1,2}\\:\\d{1,2}$/.test(date)) {\n        format = this.parseFormat('yyyy-mm-dd hh:ii', type);\n      }\n\n      if (/^\\d{4}\\-\\d{1,2}\\-\\d{1,2}[T ]\\d{1,2}\\:\\d{1,2}\\:\\d{1,2}[Z]{0,1}$/.test(date)) {\n        format = this.parseFormat('yyyy-mm-dd hh:ii:ss', type);\n      }\n\n      if (/^[-+]\\d+[dmwy]([\\s,]+[-+]\\d+[dmwy])*$/.test(date)) {\n        var part_re = /([-+]\\d+)([dmwy])/,\n            parts = date.match(/([-+]\\d+)([dmwy])/g),\n            part,\n            dir;\n        date = new Date();\n\n        for (var i = 0; i < parts.length; i++) {\n          part = part_re.exec(parts[i]);\n          dir = parseInt(part[1]);\n\n          switch (part[2]) {\n            case 'd':\n              date.setUTCDate(date.getUTCDate() + dir);\n              break;\n\n            case 'm':\n              date = Datetimepicker.prototype.moveMonth.call(Datetimepicker.prototype, date, dir);\n              break;\n\n            case 'w':\n              date.setUTCDate(date.getUTCDate() + dir * 7);\n              break;\n\n            case 'y':\n              date = Datetimepicker.prototype.moveYear.call(Datetimepicker.prototype, date, dir);\n              break;\n          }\n        }\n\n        return UTCDate(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds(), 0);\n      }\n\n      var parts = date && date.toString().match(this.nonpunctuation) || [],\n          date = new Date(0, 0, 0, 0, 0, 0, 0),\n          parsed = {},\n          setters_order = ['hh', 'h', 'ii', 'i', 'ss', 's', 'yyyy', 'yy', 'M', 'MM', 'm', 'mm', 'D', 'DD', 'd', 'dd', 'H', 'HH', 'p', 'P', 'z', 'Z'],\n          setters_map = {\n        hh: function hh(d, v) {\n          return d.setUTCHours(v);\n        },\n        h: function h(d, v) {\n          return d.setUTCHours(v);\n        },\n        HH: function HH(d, v) {\n          return d.setUTCHours(v == 12 ? 0 : v);\n        },\n        H: function H(d, v) {\n          return d.setUTCHours(v == 12 ? 0 : v);\n        },\n        ii: function ii(d, v) {\n          return d.setUTCMinutes(v);\n        },\n        i: function i(d, v) {\n          return d.setUTCMinutes(v);\n        },\n        ss: function ss(d, v) {\n          return d.setUTCSeconds(v);\n        },\n        s: function s(d, v) {\n          return d.setUTCSeconds(v);\n        },\n        yyyy: function yyyy(d, v) {\n          return d.setUTCFullYear(v);\n        },\n        yy: function yy(d, v) {\n          return d.setUTCFullYear(2000 + v);\n        },\n        m: function m(d, v) {\n          v -= 1;\n\n          while (v < 0) {\n            v += 12;\n          }\n\n          v %= 12;\n          d.setUTCMonth(v);\n\n          while (d.getUTCMonth() != v) {\n            if (isNaN(d.getUTCMonth())) return d;else d.setUTCDate(d.getUTCDate() - 1);\n          }\n\n          return d;\n        },\n        d: function d(_d, v) {\n          return _d.setUTCDate(v);\n        },\n        p: function p(d, v) {\n          return d.setUTCHours(v == 1 ? d.getUTCHours() + 12 : d.getUTCHours());\n        },\n        z: function z() {\n          return timezone;\n        }\n      },\n          val,\n          filtered,\n          part;\n      setters_map['M'] = setters_map['MM'] = setters_map['mm'] = setters_map['m'];\n      setters_map['dd'] = setters_map['d'];\n      setters_map['P'] = setters_map['p'];\n      setters_map['Z'] = setters_map['z'];\n      date = UTCDate(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds());\n\n      if (parts.length == format.parts.length) {\n        for (var i = 0, cnt = format.parts.length; i < cnt; i++) {\n          val = parseInt(parts[i], 10);\n          part = format.parts[i];\n\n          if (isNaN(val)) {\n            switch (part) {\n              case 'MM':\n                filtered = $(dates[language].months).filter(function () {\n                  var m = this.slice(0, parts[i].length),\n                      p = parts[i].slice(0, m.length);\n                  return m == p;\n                });\n                val = $.inArray(filtered[0], dates[language].months) + 1;\n                break;\n\n              case 'M':\n                filtered = $(dates[language].monthsShort).filter(function () {\n                  var m = this.slice(0, parts[i].length),\n                      p = parts[i].slice(0, m.length);\n                  return m.toLowerCase() == p.toLowerCase();\n                });\n                val = $.inArray(filtered[0], dates[language].monthsShort) + 1;\n                break;\n\n              case 'p':\n              case 'P':\n                val = $.inArray(parts[i].toLowerCase(), dates[language].meridiem);\n                break;\n\n              case 'z':\n              case 'Z':\n                timezone;\n                break;\n            }\n          }\n\n          parsed[part] = val;\n        }\n\n        for (var i = 0, s; i < setters_order.length; i++) {\n          s = setters_order[i];\n          if (s in parsed && !isNaN(parsed[s])) setters_map[s](date, parsed[s]);\n        }\n      }\n\n      return date;\n    },\n    formatDate: function formatDate(date, format, language, type, timezone) {\n      if (date == null) {\n        return '';\n      }\n\n      var val;\n\n      if (type == 'standard') {\n        val = {\n          t: date.getTime(),\n          // year\n          yy: date.getUTCFullYear().toString().substring(2),\n          yyyy: date.getUTCFullYear(),\n          // month\n          m: date.getUTCMonth() + 1,\n          M: dates[language].monthsShort[date.getUTCMonth()],\n          MM: dates[language].months[date.getUTCMonth()],\n          // day\n          d: date.getUTCDate(),\n          D: dates[language].daysShort[date.getUTCDay()],\n          DD: dates[language].days[date.getUTCDay()],\n          p: dates[language].meridiem.length == 2 ? dates[language].meridiem[date.getUTCHours() < 12 ? 0 : 1] : '',\n          // hour\n          h: date.getUTCHours(),\n          // minute\n          i: date.getUTCMinutes(),\n          // second\n          s: date.getUTCSeconds(),\n          // timezone\n          z: timezone\n        };\n\n        if (dates[language].meridiem.length == 2) {\n          val.H = val.h % 12 == 0 ? 12 : val.h % 12;\n        } else {\n          val.H = val.h;\n        }\n\n        val.HH = (val.H < 10 ? '0' : '') + val.H;\n        val.P = val.p.toUpperCase();\n        val.Z = val.z;\n        val.hh = (val.h < 10 ? '0' : '') + val.h;\n        val.ii = (val.i < 10 ? '0' : '') + val.i;\n        val.ss = (val.s < 10 ? '0' : '') + val.s;\n        val.dd = (val.d < 10 ? '0' : '') + val.d;\n        val.mm = (val.m < 10 ? '0' : '') + val.m;\n      } else if (type == 'php') {\n        // php format\n        val = {\n          // year\n          y: date.getUTCFullYear().toString().substring(2),\n          Y: date.getUTCFullYear(),\n          // month\n          F: dates[language].months[date.getUTCMonth()],\n          M: dates[language].monthsShort[date.getUTCMonth()],\n          n: date.getUTCMonth() + 1,\n          t: DPGlobal.getDaysInMonth(date.getUTCFullYear(), date.getUTCMonth()),\n          // day\n          j: date.getUTCDate(),\n          l: dates[language].days[date.getUTCDay()],\n          D: dates[language].daysShort[date.getUTCDay()],\n          w: date.getUTCDay(),\n          // 0 -> 6\n          N: date.getUTCDay() == 0 ? 7 : date.getUTCDay(),\n          // 1 -> 7\n          S: date.getUTCDate() % 10 <= dates[language].suffix.length ? dates[language].suffix[date.getUTCDate() % 10 - 1] : '',\n          // hour\n          a: dates[language].meridiem.length == 2 ? dates[language].meridiem[date.getUTCHours() < 12 ? 0 : 1] : '',\n          g: date.getUTCHours() % 12 == 0 ? 12 : date.getUTCHours() % 12,\n          G: date.getUTCHours(),\n          // minute\n          i: date.getUTCMinutes(),\n          // second\n          s: date.getUTCSeconds()\n        };\n        val.m = (val.n < 10 ? '0' : '') + val.n;\n        val.d = (val.j < 10 ? '0' : '') + val.j;\n        val.A = val.a.toString().toUpperCase();\n        val.h = (val.g < 10 ? '0' : '') + val.g;\n        val.H = (val.G < 10 ? '0' : '') + val.G;\n        val.i = (val.i < 10 ? '0' : '') + val.i;\n        val.s = (val.s < 10 ? '0' : '') + val.s;\n      } else {\n        throw new Error('Invalid format type.');\n      }\n\n      var date = [],\n          seps = $.extend([], format.separators);\n\n      for (var i = 0, cnt = format.parts.length; i < cnt; i++) {\n        if (seps.length) {\n          date.push(seps.shift());\n        }\n\n        date.push(val[format.parts[i]]);\n      }\n\n      if (seps.length) {\n        date.push(seps.shift());\n      }\n\n      return date.join('');\n    },\n    convertViewMode: function convertViewMode(viewMode) {\n      switch (viewMode) {\n        case 4:\n        case 'decade':\n          viewMode = 4;\n          break;\n\n        case 3:\n        case 'year':\n          viewMode = 3;\n          break;\n\n        case 2:\n        case 'month':\n          viewMode = 2;\n          break;\n\n        case 1:\n        case 'day':\n          viewMode = 1;\n          break;\n\n        case 0:\n        case 'hour':\n          viewMode = 0;\n          break;\n      }\n\n      return viewMode;\n    },\n    headTemplate: '<thead>' + '<tr>' + '<th class=\"prev\"><i class=\"{iconType} {leftArrow}\"/></th>' + '<th colspan=\"5\" class=\"switch\"></th>' + '<th class=\"next\"><i class=\"{iconType} {rightArrow}\"/></th>' + '</tr>' + '</thead>',\n    headTemplateV3: '<thead>' + '<tr>' + '<th class=\"prev\"><span class=\"{iconType} {leftArrow}\"></span> </th>' + '<th colspan=\"5\" class=\"switch\"></th>' + '<th class=\"next\"><span class=\"{iconType} {rightArrow}\"></span> </th>' + '</tr>' + '</thead>',\n    contTemplate: '<tbody><tr><td colspan=\"7\"></td></tr></tbody>',\n    footTemplate: '<tfoot>' + '<tr><th colspan=\"7\" class=\"today\"></th></tr>' + '<tr><th colspan=\"7\" class=\"clear\"></th></tr>' + '</tfoot>'\n  };\n  DPGlobal.template = '<div class=\"datetimepicker\">' + '<div class=\"datetimepicker-minutes\">' + '<table class=\" table-condensed\">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datetimepicker-hours\">' + '<table class=\" table-condensed\">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datetimepicker-days\">' + '<table class=\" table-condensed\">' + DPGlobal.headTemplate + '<tbody></tbody>' + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datetimepicker-months\">' + '<table class=\"table-condensed\">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datetimepicker-years\">' + '<table class=\"table-condensed\">' + DPGlobal.headTemplate + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '</div>';\n  DPGlobal.templateV3 = '<div class=\"datetimepicker\">' + '<div class=\"datetimepicker-minutes\">' + '<table class=\" table-condensed\">' + DPGlobal.headTemplateV3 + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datetimepicker-hours\">' + '<table class=\" table-condensed\">' + DPGlobal.headTemplateV3 + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datetimepicker-days\">' + '<table class=\" table-condensed\">' + DPGlobal.headTemplateV3 + '<tbody></tbody>' + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datetimepicker-months\">' + '<table class=\"table-condensed\">' + DPGlobal.headTemplateV3 + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '<div class=\"datetimepicker-years\">' + '<table class=\"table-condensed\">' + DPGlobal.headTemplateV3 + DPGlobal.contTemplate + DPGlobal.footTemplate + '</table>' + '</div>' + '</div>';\n  $.fn.datetimepicker.DPGlobal = DPGlobal;\n  /* DATETIMEPICKER NO CONFLICT\n   * =================== */\n\n  $.fn.datetimepicker.noConflict = function () {\n    $.fn.datetimepicker = old;\n    return this;\n  };\n  /* DATETIMEPICKER DATA-API\n   * ================== */\n\n\n  $(document).on('focus.datetimepicker.data-api click.datetimepicker.data-api', '[data-provide=\"datetimepicker\"]', function (e) {\n    var $this = $(this);\n    if ($this.data('datetimepicker')) return;\n    e.preventDefault(); // component click requires us to explicitly show it\n\n    $this.datetimepicker('show');\n  });\n  $(function () {\n    $('[data-provide=\"datetimepicker-inline\"]').datetimepicker();\n  });\n});"},5:function(e,t){e.exports=function(e){function t(e){"undefined"!=typeof console&&(console.error||console.log)("[Script Loader]",e)}try{"undefined"!=typeof execScript&&"undefined"!=typeof attachEvent&&"undefined"==typeof addEventListener?execScript(e):"undefined"!=typeof eval?eval.call(null,e):t("EvalError: No eval function available")}catch(e){t(e)}}},804:function(e,t,n){"use strict";n.r(t);n(19);function i(e){return(i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function a(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function s(e,t){return(s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function o(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=d(e);if(t){var a=d(this).constructor;n=Reflect.construct(i,arguments,a)}else n=i.apply(this,arguments);return r(this,n)}}function r(e,t){if(t&&("object"===i(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function d(e){return(d=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var l=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&s(e,t)}(d,e);var t,n,i,r=o(d);function d(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,d),r.call(this)}return t=d,(n=[{key:"buildBankCustomRequiredFields",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],n=$("[data-bank-custom-fields]").data("bank-custom-fields");if(n){var i=this.getRequiredAuthTypeDescriptions(n,t),a="";i.forEach((function(t){var i=t.replace("description","label");t.replace("description","param"),a+='\n          <div class="form-group form-group-lg">\n            <label for="">'.concat(n[i],"</label>\n           ").concat(e.resolveInputBasedOnParameterType(n,t),"\n          </div>\n        ")})),$("[data-bank-custom-fields]").html(a),this.createDateTimePicker()}}},{key:"resolveInputBasedOnParameterType",value:function(e,t){var n=t.replace("description","param"),i=n.replace("param","paramType"),a=i.replace("paramType","userAuthCode"),s=e[n].toLowerCase();switch(e[i].toLowerCase()){case"password":return'<input type="password"\n                      class="form-control input-lg required '.concat(n," otp-form-fields ").concat(s,'"\n                      name="').concat(a.replace("1",""),'"\n                      id="').concat(a,'"\n                      placeholder="').concat(e[t],'"/>');case"alpha":return'<input type="text"\n                      class="form-control alpha input-lg required '.concat(n," otp-form-fields ").concat(s,'"\n                      name="').concat(a.replace("1",""),'"\n                      id="').concat(a,'"\n                      pattern="[^0-9]+"\n                      placeholder="').concat(e[t],'"/>');case"numeric":return'<input type="number"\n                      class="form-control digits input-lg required '.concat(n," otp-form-fields ").concat(s,'"\n                      name="').concat(a.replace("1",""),'"\n                      id="').concat(a,'"\n                      placeholder="').concat(e[t],'"/>');case"date":return'<input type="text" readonly\n                      style="background-color: #FFF;"\n                      data-date-format="'.concat(e[i+"Format"]||"dd/mm/yyyy",'"\n                      class="form-control date-field input-lg required ').concat(n," otp-form-fields ").concat(s,'"\n                      name="').concat(a.replace("1",""),'"\n                      id="').concat(a,'"\n                      placeholder="').concat(e[t],'"/>');default:return'<input type="text"\n                      class="form-control input-lg required '.concat(n," otp-form-fields ").concat(s,'"\n                      name="').concat(a.replace("1",""),'"\n                      id="').concat(a,'"\n                      placeholder="').concat(e[t],'"/>')}}},{key:"getRequiredAuthTypeDescriptions",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=Object.keys(e).filter((function(e){return e.match(/description/i)}));return t&&n.sort((function(e,t){return+(e.match(/\d+/)||0)-+(t.match(/\d+/)||0)})),n}},{key:"createDateTimePicker",value:function(){$(".date-field").each((function(e,t){var n=$(t).data("date-format"),i=/DD/i.test(n)?2:3;$(t).datetimepicker({format:n,minView:i,autoclose:!0,startView:"decade"})}))}}])&&a(t.prototype,n),i&&a(t,i),Object.defineProperty(t,"prototype",{writable:!1}),d}(n(2).a);function h(e){return(h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function c(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}function u(e,t){return(u=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function f(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,i=m(e);if(t){var a=m(this).constructor;n=Reflect.construct(i,arguments,a)}else n=i.apply(this,arguments);return p(this,n)}}function p(e,t){if(t&&("object"===h(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function m(e){return(m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}var v=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&u(e,t)}(s,e);var t,n,i,a=f(s);function s(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s),a.call(this)}return t=s,(n=[{key:"requestOTP",value:function(e){return this.post("/remita/onepage/activate-mandate.json",e)}}])&&c(t.prototype,n),i&&c(t,i),Object.defineProperty(t,"prototype",{writable:!1}),s}(n(1).a);function y(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}var g=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.view=new l,this.service=new v}var t,n,i;return t=e,(n=[{key:"init",value:function(){this.addCustomMessages(),this.addFormBehavior()}},{key:"addFormBehavior",value:function(){var e=this;$(document).on("custom-fields-loaded",(function(t){return e.view.buildBankCustomRequiredFields()})),$(document).on("custom-fields-loaded-and-sort",(function(t){return e.view.buildBankCustomRequiredFields(!0)})),$(document).on("click",".bank-custom-request-otp",(function(t){return e.displayCustomFields()}))}},{key:"displayCustomFields",value:function(){$(document).trigger("initBankValidation"),this.service.requestOTP({bankCode:$("#bank-code").val(),accountNumber:$("#account-number").val()}).then(this.handleSuccessfulOtpRequest).catch((function(e){}))}},{key:"handleSuccessfulOtpRequest",value:function(e){var t=e.responseData[0],n=t.requiredAuthTypes,i=$("[data-bank-custom-fields]");i.data("bank-custom-fields",n),i.data("request-id",t.requestId),$(document).trigger("custom-fields-loaded"),$(".qr-code-section ").addClass("hidden"),$("#otpForm").removeClass("hidden")}},{key:"addCustomMessages",value:function(){$.validator.messages.pattern="Please enter only alphabet characters"}}])&&y(t.prototype,n),i&&y(t,i),Object.defineProperty(t,"prototype",{writable:!1}),e}();$((function(){(new g).init()}))}});